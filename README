
This  project  allows  to  generate bidirectional  DSHOT  protocol  to
control ESCs via the GPIO pins of  a Raspberry Pi 5.  It uses 'piolib'
and RP1 coprocessor to generate  the signal and scan telemetry frames.
It works well even if the main CPU is loaded by other tasks.

It supports up to 28 motors.  However, motors shall be connected to up
to 4 continuous ranges of GPIO numbers.

All versions  of bidirectional DSHOT  (300 /  600 / 1200)  shall work.
The specific version has to  be set into 'dshotVersion' variable prior
to the initialization.

Bidirectional DSHOT allows  to control motors and  read telemetry data
from ESC  back to Raspberry Pi  on a single line.   The available data
include  rotation  speed  and   optionally  temperature,  voltage  and
current.   Note that  from  the  point of  view  of  update rate,  the
bidirectional DSHOT is much  less performant than unidirectional DSHOT
mainly due to line switching constraints.

Some code used in this project comes from Joseph Duchesne's project:
https://github.com/josephduchesne/pico-dshot-bidir

You  will need  the  newest  version of  Raspbian  OS  and the  newest
bootloader version (see the ‘Advanced Options’ of raspi-config) to run
this code.

To compile and run a simple test that spins 4 motors connected to GPIO
16, 19, 20 and 21 (two continuos ranges of GPIOs) , type:

    	   make test
	   sudo ./test 16 19 20 21

If it does not work for your  ESC you may need to edit 'motor-dshot.c'
and adjust DSHOT_CLOCK_DIVIDER_FACTOR macro.


